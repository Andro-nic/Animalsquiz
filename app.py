import os
from aiogram import Router, Bot
from aiogram import types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile
import aiosmtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from quiz import questions
import animals
from animals import animal_info
from animals import animal_images
from dotenv import load_dotenv, find_dotenv

load_dotenv(find_dotenv())
#–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
PHONE_NUMBER = os.getenv('PHONE_NUMBER')
EMAIL_ADDRESS = os.getenv('EMAIL_ADDRESS')
EMAIL_PASSWORD = os.getenv('EMAIL_PASSWORD')
HOST_NAME = os.getenv('HOST_NAME')
PORT = os.getenv('PORT')
RECIPIENT_EMAIL = os.getenv('RECIPIENT_EMAIL')
TOKEN = os.getenv('TOKEN')
BOT_USERNAME = os.getenv('BOT_USERNAME')
WEBSITE = os.getenv('WEBSITE')


bot = Bot(token=TOKEN)
router = Router()

# –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
animals = animals.animals
current_question_index = 0


async def send_main_menu(chat_id: int, state: FSMContext, exclude: list[str] | None = None):

    menu_actions = {
        "start": "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞—Ä—Ç—É",
        "info": "–ù–∞—à–∞ —Ü–µ–ª—å",
        "share": "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º",
        "feedback": "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
        "restart": "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ç–æ—Ç–µ–º"
    }

    if exclude:
        for action_to_exclude in exclude:
            if action_to_exclude in menu_actions:
                del menu_actions[action_to_exclude]

    # —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
    inline_keyboard = [
        [types.InlineKeyboardButton(text=label, callback_data=f"menu:{action}")]
        for action, label in menu_actions.items()
    ]

    markup = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    menu_message = await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    await state.update_data(menu_message_id=menu_message.message_id)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
#/start` –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
@router.message(Command('start', 'help'))
async def start(msg: Message, state: FSMContext):
    user_name = msg.from_user.first_name
    text = f"""–Ø, <b>–º–∞–Ω—É–ª –¢–∏–º–æ—Ñ–µ–π</b> - 
    —Å–∏–º–≤–æ–ª <i>–ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –ó–æ–æ–ø–∞—Ä–∫–∞</i>
    
    –ü—Ä–∏–≤–µ—Ç, {user_name}!!!
    
–Ø —Ä–∞–¥, —á—Ç–æ —Ç—ã –ø–æ—Å–µ—Ç–∏–ª –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç. 
            
–°–µ–≥–æ–¥–Ω—è —è –ø—Ä–æ–≤–µ–¥—É –¥–ª—è —Ç–µ–±—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—É,               
—Ü–µ–ª—å –∫–æ—Ç–æ—Ä–æ–π –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ.
–î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É
'–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ç–æ—Ç–µ–º' –∏ —á–µ—Å—Ç–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.

–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –∂–º–∏ - "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ç–æ—Ç–µ–º"
–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ, - –∂–º–∏ "–ù–∞—à–∞ —Ü–µ–ª—å" 
 """

    await bot.send_photo(msg.chat.id, photo=types.FSInputFile('images/manul.jpg'))
    await bot.send_message(msg.chat.id, text, parse_mode='HTML')
    await send_main_menu(msg.chat.id, state, exclude=["start", "share",'feedback'])

#/info` –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞
@router.message(Command('info'))
async def info(msg: Message, state: FSMContext):

    text = f"""
–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞ ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –ø–ª–∞–Ω–µ—Ç—ã.
–£—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ ¬´–ö–ª—É–± –¥—Ä—É–∑–µ–π –∑–æ–æ–ø–∞—Ä–∫–∞¬ª ‚Äî —ç—Ç–æ –ø–æ–º–æ—â—å –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –Ω–∞—à–∏—Ö –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π. 
–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –æ–ø–µ–∫—É–Ω—ã –æ–±—ä–µ–¥–∏–Ω–∏–ª–∏—Å—å –≤ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ ‚Äî –ö–ª—É–± –¥—Ä—É–∑–µ–π –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞. 
–û–ø–µ–∫–∞—Ç—å ‚Äì –∑–Ω–∞—á–∏—Ç –ø–æ–º–æ–≥–∞—Ç—å –ª—é–±–∏–º—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º.
–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:

üìû –¢–µ–ª–µ—Ñ–æ–Ω: <a href="tel:{PHONE_NUMBER}">{PHONE_NUMBER}</a>'
   
üåê –í–µ–±—Å–∞–π—Ç: <a href="{WEBSITE}">{WEBSITE}</a>
"""

    await bot.send_photo(msg.chat.id, photo=types.FSInputFile('images/MZoo-logo-hor-rus-preview-RGB.jpg'))
    await bot.send_message(msg.chat.id, text=text, parse_mode='HTML')
    await send_main_menu(msg.chat.id, state, exclude=["info","share",'feedback'])

#/share` –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º —Ç–æ—Ç–µ–º–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º
@router.message(Command('share'))
async def share_result(msg: Message, state: FSMContext):
    data = await state.get_data()
    if 'animals' in data:
        result = max(data['animals'], key=data['animals'].get)
        file_path = animal_images.get(result)
        print(animal_images)
        if file_path:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –¥–ª—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            photo = FSInputFile(file_path)  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FSInputFile –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            await bot.send_photo(
                msg.chat.id,
                photo,
                caption=(
                    '–ü–æ–¥–µ–ª–∏—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ - –ø–æ–º–æ–≥–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–º —É–∑–Ω–∞—Ç—å –æ "–ö–ª—É–±–µ –¥—Ä—É–∑–µ–π".\n\n'
                    f'–ú–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {result}\n\n'
                    f'–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É: {BOT_USERNAME}'
                )
            )
        else:
            await bot.send_message(msg.chat.id, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è '{result}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await send_main_menu(msg.chat.id, state, exclude=["share"])


#feedback` –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ.
@router.message(Command('feedback'))
async def get_feedback(msg: Message, state: FSMContext):
    data = await state.get_data()
    print(data)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(
        msg.chat.id,
        f'–ù–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: <a href="tel:{PHONE_NUMBER}">{PHONE_NUMBER}</a>',
        parse_mode='HTML'
    )

    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    user_name = msg.from_user.username
    result = max(data['animals'], key=data['animals'].get)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
    email_subject = "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞: –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    email_body = f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}\n" \
                 f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {PHONE_NUMBER}\n" \
                 f"–¢–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {result}"

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    try:
        message = MIMEMultipart()
        message['From'] = EMAIL_ADDRESS
        message['To'] = RECIPIENT_EMAIL
        message['Subject'] = email_subject
        message.attach(MIMEText(email_body, 'plain'))

        # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await aiosmtplib.send(
            message,
            hostname=HOST_NAME,
            port=PORT,
            username=EMAIL_ADDRESS,
            password=EMAIL_PASSWORD,
            #use_tls=True
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")

    await send_main_menu(msg.chat.id, state, exclude=["feedback"])


#/restart` –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.
@router.message(Command('restart'))
async def restart(msg: Message, state: FSMContext):
    await state.clear()
    await quiz(msg, state)


class QuizState(StatesGroup):
    waiting_for_answer = State()


# —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@router.message(Command('quiz'))
async def quiz(msg: Message, state: FSMContext):
    await state.update_data(current_question_index=0,
                            animals={animal: 0 for animal in animals.keys()})
    await send_question(msg.chat.id, state, msg)


async def send_question(chat_id: int, state: FSMContext, msg: Message):
    data = await state.get_data()
    current_question_index = data.get('current_question_index', 0)
    if current_question_index < len(questions):
        question = questions[current_question_index]
        # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        inline_keyboard_buttons = [
            [types.InlineKeyboardButton(text=option, callback_data=f"answer:{option}")]
            for option in question['options']
        ]
        inline_markup = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard_buttons)
        # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        question_message_id = data.get('question_message_id')
        if question_message_id:
            try:
                await bot.delete_message(chat_id, question_message_id)
            except Exception:
                pass
        # –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        sent_message = await bot.send_message(chat_id, question['question'], reply_markup=inline_markup)

        await state.update_data(question_message_id=sent_message.message_id)
        # –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        await state.set_state(QuizState.waiting_for_answer)
    else:
        await show_result(chat_id, state, msg)


@router.callback_query(lambda c: c.data.startswith("answer:"))
async def handle_inline_answer(callback_query: types.CallbackQuery, state: FSMContext):
    selected_option = callback_query.data.split(":")[1]
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    current_question_index = data.get('current_question_index', 0)
    if current_question_index < len(questions):
        question = questions[current_question_index]

        for animal in question['animal_mapping'].get(selected_option, []):
            data['animals'][animal] = data['animals'].get(animal, 0) + 1
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(current_question_index=current_question_index + 1, animals=data['animals'])
        # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await callback_query.message.delete()
        except Exception as e:
            pass
        # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await send_question(callback_query.message.chat.id, state, callback_query.message)
    else:
        await show_result(callback_query.message.chat.id, state, callback_query.message)  # !!!


@router.callback_query(lambda c: c.data.startswith("menu:"))
async def handle_menu_callback(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data.split("menu:")[1]

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
    data = await state.get_data()
    menu_message_id = data.get('menu_message_id')
    if menu_message_id:
        try:
            await bot.delete_message(callback_query.message.chat.id, menu_message_id)
        except Exception:
            pass

    # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
    if action == "start":
        await start(callback_query.message, state)
    elif action == "info":
        await info(callback_query.message, state)
    elif action == "share":
        await share_result(callback_query.message, state)
    elif action == "feedback":
        await get_feedback(callback_query.message, state)
    elif action == "restart":
        await restart(callback_query.message, state)
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Telegram
    await callback_query.answer()


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∏–≤–æ—Ç–Ω–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
async def show_result(chat_id: int, state: FSMContext, msg: Message):
    data = await state.get_data()
    result = max(data['animals'], key=data['animals'].get)

    await bot.send_message(chat_id, f'–¢–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - <b>{result}</b>! ', parse_mode='HTML')

    await animal_info(chat_id, result)
    await send_main_menu(msg.chat.id, state)